// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/port/message_sender.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/port/message_sender.go -destination=internal/domain/port/message_sender_mock.go -package=port
//

// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"

	button "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/button"
	msginfo "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/msginfo"
	order "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/order"
	product "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/product"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
	isgomock struct{}
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// AnswerOrderPayment mocks base method.
func (m *MockMessageSender) AnswerOrderPayment(ctx context.Context, paymentID string, ok bool, errorMsg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerOrderPayment", ctx, paymentID, ok, errorMsg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerOrderPayment indicates an expected call of AnswerOrderPayment.
func (mr *MockMessageSenderMockRecorder) AnswerOrderPayment(ctx, paymentID, ok, errorMsg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerOrderPayment", reflect.TypeOf((*MockMessageSender)(nil).AnswerOrderPayment), ctx, paymentID, ok, errorMsg)
}

// DeleteMessage mocks base method.
func (m *MockMessageSender) DeleteMessage(ctx context.Context, chatID msginfo.ChatID, messageID msginfo.MessageID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteMessage", ctx, chatID, messageID)
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageSenderMockRecorder) DeleteMessage(ctx, chatID, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageSender)(nil).DeleteMessage), ctx, chatID, messageID)
}

// EditTextMessage mocks base method.
func (m *MockMessageSender) EditTextMessage(ctx context.Context, chatID msginfo.ChatID, messageID msginfo.MessageID, text string, rows ...button.InlineKeyboardButtonRow) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, messageID, text}
	for _, a := range rows {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "EditTextMessage", varargs...)
}

// EditTextMessage indicates an expected call of EditTextMessage.
func (mr *MockMessageSenderMockRecorder) EditTextMessage(ctx, chatID, messageID, text any, rows ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, messageID, text}, rows...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTextMessage", reflect.TypeOf((*MockMessageSender)(nil).EditTextMessage), varargs...)
}

// EscapeMarkdown mocks base method.
func (m *MockMessageSender) EscapeMarkdown(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EscapeMarkdown", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// EscapeMarkdown indicates an expected call of EscapeMarkdown.
func (mr *MockMessageSenderMockRecorder) EscapeMarkdown(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EscapeMarkdown", reflect.TypeOf((*MockMessageSender)(nil).EscapeMarkdown), s)
}

// ReplyText mocks base method.
func (m *MockMessageSender) ReplyText(ctx context.Context, chatID msginfo.ChatID, replyToMsgID msginfo.MessageID, text string, buttons ...button.InlineKeyboardButtonRow) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, replyToMsgID, text}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReplyText", varargs...)
}

// ReplyText indicates an expected call of ReplyText.
func (mr *MockMessageSenderMockRecorder) ReplyText(ctx, chatID, replyToMsgID, text any, buttons ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, replyToMsgID, text}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyText", reflect.TypeOf((*MockMessageSender)(nil).ReplyText), varargs...)
}

// ReplyTextMarkdown mocks base method.
func (m *MockMessageSender) ReplyTextMarkdown(ctx context.Context, chatID msginfo.ChatID, replyToMsgID msginfo.MessageID, text string, buttons ...button.InlineKeyboardButtonRow) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, replyToMsgID, text}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReplyTextMarkdown", varargs...)
}

// ReplyTextMarkdown indicates an expected call of ReplyTextMarkdown.
func (mr *MockMessageSenderMockRecorder) ReplyTextMarkdown(ctx, chatID, replyToMsgID, text any, buttons ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, replyToMsgID, text}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTextMarkdown", reflect.TypeOf((*MockMessageSender)(nil).ReplyTextMarkdown), varargs...)
}

// SendOrderInvoice mocks base method.
func (m *MockMessageSender) SendOrderInvoice(ctx context.Context, chatID msginfo.ChatID, title, description string, ord *order.Order, productsInfo map[product.ProductID]product.Product, currency string, rows ...button.InlineKeyboardButtonRow) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, title, description, ord, productsInfo, currency}
	for _, a := range rows {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendOrderInvoice", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrderInvoice indicates an expected call of SendOrderInvoice.
func (mr *MockMessageSenderMockRecorder) SendOrderInvoice(ctx, chatID, title, description, ord, productsInfo, currency any, rows ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, title, description, ord, productsInfo, currency}, rows...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderInvoice", reflect.TypeOf((*MockMessageSender)(nil).SendOrderInvoice), varargs...)
}

// SendPNGMarkdown mocks base method.
func (m *MockMessageSender) SendPNGMarkdown(ctx context.Context, chatID msginfo.ChatID, caption string, png []byte, buttons ...button.InlineKeyboardButtonRow) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, caption, png}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendPNGMarkdown", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPNGMarkdown indicates an expected call of SendPNGMarkdown.
func (mr *MockMessageSenderMockRecorder) SendPNGMarkdown(ctx, chatID, caption, png any, buttons ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, caption, png}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPNGMarkdown", reflect.TypeOf((*MockMessageSender)(nil).SendPNGMarkdown), varargs...)
}

// SendText mocks base method.
func (m *MockMessageSender) SendText(ctx context.Context, chatID msginfo.ChatID, text string, buttons ...button.InlineKeyboardButtonRow) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, text}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendText", varargs...)
}

// SendText indicates an expected call of SendText.
func (mr *MockMessageSenderMockRecorder) SendText(ctx, chatID, text any, buttons ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, text}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendText", reflect.TypeOf((*MockMessageSender)(nil).SendText), varargs...)
}

// SendTextMarkdown mocks base method.
func (m *MockMessageSender) SendTextMarkdown(ctx context.Context, chatID msginfo.ChatID, text string, buttons ...button.InlineKeyboardButtonRow) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, chatID, text}
	for _, a := range buttons {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SendTextMarkdown", varargs...)
}

// SendTextMarkdown indicates an expected call of SendTextMarkdown.
func (mr *MockMessageSenderMockRecorder) SendTextMarkdown(ctx, chatID, text any, buttons ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, chatID, text}, buttons...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTextMarkdown", reflect.TypeOf((*MockMessageSender)(nil).SendTextMarkdown), varargs...)
}
