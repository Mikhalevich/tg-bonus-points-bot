// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/port/customer_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/port/customer_repository.go -destination=internal/domain/port/customer_repository_mock.go -package=port
//

// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"
	time "time"

	currency "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/currency"
	msginfo "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/msginfo"
	order "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/order"
	product "github.com/Mikhalevich/tg-bonus-points-bot/internal/domain/port/product"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerOrderPaymentRepository is a mock of CustomerOrderPaymentRepository interface.
type MockCustomerOrderPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerOrderPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerOrderPaymentRepositoryMockRecorder is the mock recorder for MockCustomerOrderPaymentRepository.
type MockCustomerOrderPaymentRepositoryMockRecorder struct {
	mock *MockCustomerOrderPaymentRepository
}

// NewMockCustomerOrderPaymentRepository creates a new mock instance.
func NewMockCustomerOrderPaymentRepository(ctrl *gomock.Controller) *MockCustomerOrderPaymentRepository {
	mock := &MockCustomerOrderPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerOrderPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerOrderPaymentRepository) EXPECT() *MockCustomerOrderPaymentRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyByID mocks base method.
func (m *MockCustomerOrderPaymentRepository) GetCurrencyByID(ctx context.Context, id currency.ID) (*currency.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", ctx, id)
	ret0, _ := ret[0].(*currency.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) GetCurrencyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).GetCurrencyByID), ctx, id)
}

// GetOrderByID mocks base method.
func (m *MockCustomerOrderPaymentRepository) GetOrderByID(ctx context.Context, id order.ID) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) GetOrderByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).GetOrderByID), ctx, id)
}

// GetOrderPositionByStatus mocks base method.
func (m *MockCustomerOrderPaymentRepository) GetOrderPositionByStatus(ctx context.Context, id order.ID, statuses ...order.Status) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderPositionByStatus", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderPositionByStatus indicates an expected call of GetOrderPositionByStatus.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) GetOrderPositionByStatus(ctx, id any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderPositionByStatus", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).GetOrderPositionByStatus), varargs...)
}

// GetProductsByIDs mocks base method.
func (m *MockCustomerOrderPaymentRepository) GetProductsByIDs(ctx context.Context, ids []product.ProductID, currencyID currency.ID) (map[product.ProductID]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, ids, currencyID)
	ret0, _ := ret[0].(map[product.ProductID]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) GetProductsByIDs(ctx, ids, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).GetProductsByIDs), ctx, ids, currencyID)
}

// IsNotFoundError mocks base method.
func (m *MockCustomerOrderPaymentRepository) IsNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) IsNotFoundError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).IsNotFoundError), err)
}

// UpdateOrderByChatAndID mocks base method.
func (m *MockCustomerOrderPaymentRepository) UpdateOrderByChatAndID(ctx context.Context, orderID order.ID, chatID msginfo.ChatID, data UpdateOrderData, prevStatuses ...order.Status) (*order.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orderID, chatID, data}
	for _, a := range prevStatuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderByChatAndID", varargs...)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderByChatAndID indicates an expected call of UpdateOrderByChatAndID.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) UpdateOrderByChatAndID(ctx, orderID, chatID, data any, prevStatuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orderID, chatID, data}, prevStatuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderByChatAndID", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).UpdateOrderByChatAndID), varargs...)
}

// UpdateOrderStatus mocks base method.
func (m *MockCustomerOrderPaymentRepository) UpdateOrderStatus(ctx context.Context, id order.ID, operationTime time.Time, newStatus order.Status, prevStatuses ...order.Status) (*order.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, operationTime, newStatus}
	for _, a := range prevStatuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderStatus", varargs...)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockCustomerOrderPaymentRepositoryMockRecorder) UpdateOrderStatus(ctx, id, operationTime, newStatus any, prevStatuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, operationTime, newStatus}, prevStatuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockCustomerOrderPaymentRepository)(nil).UpdateOrderStatus), varargs...)
}

// MockCustomerOrderActionRepository is a mock of CustomerOrderActionRepository interface.
type MockCustomerOrderActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerOrderActionRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerOrderActionRepositoryMockRecorder is the mock recorder for MockCustomerOrderActionRepository.
type MockCustomerOrderActionRepositoryMockRecorder struct {
	mock *MockCustomerOrderActionRepository
}

// NewMockCustomerOrderActionRepository creates a new mock instance.
func NewMockCustomerOrderActionRepository(ctrl *gomock.Controller) *MockCustomerOrderActionRepository {
	mock := &MockCustomerOrderActionRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerOrderActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerOrderActionRepository) EXPECT() *MockCustomerOrderActionRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyByID mocks base method.
func (m *MockCustomerOrderActionRepository) GetCurrencyByID(ctx context.Context, id currency.ID) (*currency.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", ctx, id)
	ret0, _ := ret[0].(*currency.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetCurrencyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetCurrencyByID), ctx, id)
}

// GetOrderByChatIDAndStatus mocks base method.
func (m *MockCustomerOrderActionRepository) GetOrderByChatIDAndStatus(ctx context.Context, id msginfo.ChatID, statuses ...order.Status) (*order.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderByChatIDAndStatus", varargs...)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByChatIDAndStatus indicates an expected call of GetOrderByChatIDAndStatus.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetOrderByChatIDAndStatus(ctx, id any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByChatIDAndStatus", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetOrderByChatIDAndStatus), varargs...)
}

// GetOrderByID mocks base method.
func (m *MockCustomerOrderActionRepository) GetOrderByID(ctx context.Context, id order.ID) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetOrderByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetOrderByID), ctx, id)
}

// GetOrderPositionByStatus mocks base method.
func (m *MockCustomerOrderActionRepository) GetOrderPositionByStatus(ctx context.Context, id order.ID, statuses ...order.Status) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderPositionByStatus", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderPositionByStatus indicates an expected call of GetOrderPositionByStatus.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetOrderPositionByStatus(ctx, id any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderPositionByStatus", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetOrderPositionByStatus), varargs...)
}

// GetOrdersCountByStatus mocks base method.
func (m *MockCustomerOrderActionRepository) GetOrdersCountByStatus(ctx context.Context, statuses ...order.Status) (int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range statuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrdersCountByStatus", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCountByStatus indicates an expected call of GetOrdersCountByStatus.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetOrdersCountByStatus(ctx any, statuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, statuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCountByStatus", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetOrdersCountByStatus), varargs...)
}

// GetProductsByIDs mocks base method.
func (m *MockCustomerOrderActionRepository) GetProductsByIDs(ctx context.Context, ids []product.ProductID, currencyID currency.ID) (map[product.ProductID]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, ids, currencyID)
	ret0, _ := ret[0].(map[product.ProductID]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) GetProductsByIDs(ctx, ids, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).GetProductsByIDs), ctx, ids, currencyID)
}

// IsNotFoundError mocks base method.
func (m *MockCustomerOrderActionRepository) IsNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) IsNotFoundError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).IsNotFoundError), err)
}

// IsNotUpdatedError mocks base method.
func (m *MockCustomerOrderActionRepository) IsNotUpdatedError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotUpdatedError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotUpdatedError indicates an expected call of IsNotUpdatedError.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) IsNotUpdatedError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotUpdatedError", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).IsNotUpdatedError), err)
}

// UpdateOrderByChatAndID mocks base method.
func (m *MockCustomerOrderActionRepository) UpdateOrderByChatAndID(ctx context.Context, orderID order.ID, chatID msginfo.ChatID, data UpdateOrderData, prevStatuses ...order.Status) (*order.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orderID, chatID, data}
	for _, a := range prevStatuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderByChatAndID", varargs...)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderByChatAndID indicates an expected call of UpdateOrderByChatAndID.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) UpdateOrderByChatAndID(ctx, orderID, chatID, data any, prevStatuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orderID, chatID, data}, prevStatuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderByChatAndID", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).UpdateOrderByChatAndID), varargs...)
}

// UpdateOrderStatusByChatAndID mocks base method.
func (m *MockCustomerOrderActionRepository) UpdateOrderStatusByChatAndID(ctx context.Context, orderID order.ID, chatID msginfo.ChatID, operationTime time.Time, newStatus order.Status, prevStatuses ...order.Status) (*order.Order, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, orderID, chatID, operationTime, newStatus}
	for _, a := range prevStatuses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrderStatusByChatAndID", varargs...)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderStatusByChatAndID indicates an expected call of UpdateOrderStatusByChatAndID.
func (mr *MockCustomerOrderActionRepositoryMockRecorder) UpdateOrderStatusByChatAndID(ctx, orderID, chatID, operationTime, newStatus any, prevStatuses ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, orderID, chatID, operationTime, newStatus}, prevStatuses...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusByChatAndID", reflect.TypeOf((*MockCustomerOrderActionRepository)(nil).UpdateOrderStatusByChatAndID), varargs...)
}

// MockCustomerOrderHistoryRepository is a mock of CustomerOrderHistoryRepository interface.
type MockCustomerOrderHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerOrderHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerOrderHistoryRepositoryMockRecorder is the mock recorder for MockCustomerOrderHistoryRepository.
type MockCustomerOrderHistoryRepositoryMockRecorder struct {
	mock *MockCustomerOrderHistoryRepository
}

// NewMockCustomerOrderHistoryRepository creates a new mock instance.
func NewMockCustomerOrderHistoryRepository(ctrl *gomock.Controller) *MockCustomerOrderHistoryRepository {
	mock := &MockCustomerOrderHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerOrderHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerOrderHistoryRepository) EXPECT() *MockCustomerOrderHistoryRepositoryMockRecorder {
	return m.recorder
}

// GetCurrencyByID mocks base method.
func (m *MockCustomerOrderHistoryRepository) GetCurrencyByID(ctx context.Context, id currency.ID) (*currency.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", ctx, id)
	ret0, _ := ret[0].(*currency.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) GetCurrencyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).GetCurrencyByID), ctx, id)
}

// HistoryOrdersAfterID mocks base method.
func (m *MockCustomerOrderHistoryRepository) HistoryOrdersAfterID(ctx context.Context, chatID msginfo.ChatID, id order.ID, size int) ([]order.HistoryOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOrdersAfterID", ctx, chatID, id, size)
	ret0, _ := ret[0].([]order.HistoryOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOrdersAfterID indicates an expected call of HistoryOrdersAfterID.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) HistoryOrdersAfterID(ctx, chatID, id, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOrdersAfterID", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).HistoryOrdersAfterID), ctx, chatID, id, size)
}

// HistoryOrdersBeforeID mocks base method.
func (m *MockCustomerOrderHistoryRepository) HistoryOrdersBeforeID(ctx context.Context, chatID msginfo.ChatID, id order.ID, size int) ([]order.HistoryOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOrdersBeforeID", ctx, chatID, id, size)
	ret0, _ := ret[0].([]order.HistoryOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOrdersBeforeID indicates an expected call of HistoryOrdersBeforeID.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) HistoryOrdersBeforeID(ctx, chatID, id, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOrdersBeforeID", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).HistoryOrdersBeforeID), ctx, chatID, id, size)
}

// HistoryOrdersCount mocks base method.
func (m *MockCustomerOrderHistoryRepository) HistoryOrdersCount(ctx context.Context, chatID msginfo.ChatID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOrdersCount", ctx, chatID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOrdersCount indicates an expected call of HistoryOrdersCount.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) HistoryOrdersCount(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOrdersCount", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).HistoryOrdersCount), ctx, chatID)
}

// HistoryOrdersFirst mocks base method.
func (m *MockCustomerOrderHistoryRepository) HistoryOrdersFirst(ctx context.Context, chatID msginfo.ChatID, size int) ([]order.HistoryOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOrdersFirst", ctx, chatID, size)
	ret0, _ := ret[0].([]order.HistoryOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOrdersFirst indicates an expected call of HistoryOrdersFirst.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) HistoryOrdersFirst(ctx, chatID, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOrdersFirst", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).HistoryOrdersFirst), ctx, chatID, size)
}

// HistoryOrdersLast mocks base method.
func (m *MockCustomerOrderHistoryRepository) HistoryOrdersLast(ctx context.Context, chatID msginfo.ChatID, size int) ([]order.HistoryOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistoryOrdersLast", ctx, chatID, size)
	ret0, _ := ret[0].([]order.HistoryOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HistoryOrdersLast indicates an expected call of HistoryOrdersLast.
func (mr *MockCustomerOrderHistoryRepositoryMockRecorder) HistoryOrdersLast(ctx, chatID, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistoryOrdersLast", reflect.TypeOf((*MockCustomerOrderHistoryRepository)(nil).HistoryOrdersLast), ctx, chatID, size)
}

// MockCustomerCartRepository is a mock of CustomerCartRepository interface.
type MockCustomerCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerCartRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerCartRepositoryMockRecorder is the mock recorder for MockCustomerCartRepository.
type MockCustomerCartRepositoryMockRecorder struct {
	mock *MockCustomerCartRepository
}

// NewMockCustomerCartRepository creates a new mock instance.
func NewMockCustomerCartRepository(ctrl *gomock.Controller) *MockCustomerCartRepository {
	mock := &MockCustomerCartRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerCartRepository) EXPECT() *MockCustomerCartRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockCustomerCartRepository) CreateOrder(ctx context.Context, coi CreateOrderInput) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, coi)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockCustomerCartRepositoryMockRecorder) CreateOrder(ctx, coi any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockCustomerCartRepository)(nil).CreateOrder), ctx, coi)
}

// GetCategories mocks base method.
func (m *MockCustomerCartRepository) GetCategories(ctx context.Context) ([]product.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx)
	ret0, _ := ret[0].([]product.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockCustomerCartRepositoryMockRecorder) GetCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockCustomerCartRepository)(nil).GetCategories), ctx)
}

// GetCurrencyByID mocks base method.
func (m *MockCustomerCartRepository) GetCurrencyByID(ctx context.Context, id currency.ID) (*currency.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyByID", ctx, id)
	ret0, _ := ret[0].(*currency.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyByID indicates an expected call of GetCurrencyByID.
func (mr *MockCustomerCartRepositoryMockRecorder) GetCurrencyByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyByID", reflect.TypeOf((*MockCustomerCartRepository)(nil).GetCurrencyByID), ctx, id)
}

// GetProductsByCategoryID mocks base method.
func (m *MockCustomerCartRepository) GetProductsByCategoryID(ctx context.Context, categoryID product.CategoryID, currencyID currency.ID) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategoryID", ctx, categoryID, currencyID)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategoryID indicates an expected call of GetProductsByCategoryID.
func (mr *MockCustomerCartRepositoryMockRecorder) GetProductsByCategoryID(ctx, categoryID, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategoryID", reflect.TypeOf((*MockCustomerCartRepository)(nil).GetProductsByCategoryID), ctx, categoryID, currencyID)
}

// GetProductsByIDs mocks base method.
func (m *MockCustomerCartRepository) GetProductsByIDs(ctx context.Context, ids []product.ProductID, currencyID currency.ID) (map[product.ProductID]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, ids, currencyID)
	ret0, _ := ret[0].(map[product.ProductID]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockCustomerCartRepositoryMockRecorder) GetProductsByIDs(ctx, ids, currencyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockCustomerCartRepository)(nil).GetProductsByIDs), ctx, ids, currencyID)
}

// IsAlreadyExistsError mocks base method.
func (m *MockCustomerCartRepository) IsAlreadyExistsError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlreadyExistsError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlreadyExistsError indicates an expected call of IsAlreadyExistsError.
func (mr *MockCustomerCartRepositoryMockRecorder) IsAlreadyExistsError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlreadyExistsError", reflect.TypeOf((*MockCustomerCartRepository)(nil).IsAlreadyExistsError), err)
}
